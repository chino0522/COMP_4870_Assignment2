// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using assignment2Library.Data;

#nullable disable

namespace assignment2Library.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240315045425_M1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1420c19b-eee5-4df0-8a34-94ead1852708",
                            RoleId = "01c09cf9-8dc0-4aef-9d6c-2e18a4db1646"
                        },
                        new
                        {
                            UserId = "cbeafd4d-6cfb-4518-960d-3c0319339b73",
                            RoleId = "00374381-1377-4967-b54f-ac003400c18b"
                        },
                        new
                        {
                            UserId = "b6db3e34-3ed9-4e48-a777-6c88f2df0534",
                            RoleId = "995fc891-743c-48f1-b603-d02109d9ddc2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("assignment2Library.Models.Manifest", b =>
                {
                    b.Property<int>("ManifestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TripId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("ManifestId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ManifestId", "MemberId")
                        .IsUnique();

                    b.ToTable("Manifest", (string)null);

                    b.HasData(
                        new
                        {
                            ManifestId = 1,
                            Created = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(3000),
                            CreatedBy = "System",
                            MemberId = 1,
                            Modified = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(3000),
                            ModifiedBy = "System",
                            Notes = "I will be driving to work",
                            TripId = 1
                        },
                        new
                        {
                            ManifestId = 2,
                            Created = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(3010),
                            CreatedBy = "System",
                            MemberId = 2,
                            Modified = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(3010),
                            ModifiedBy = "System",
                            Notes = "I will be driving to work",
                            TripId = 2
                        },
                        new
                        {
                            ManifestId = 3,
                            Created = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(3010),
                            CreatedBy = "System",
                            MemberId = 3,
                            Modified = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(3010),
                            ModifiedBy = "System",
                            Notes = "I will be driving to work",
                            TripId = 3
                        });
                });

            modelBuilder.Entity("assignment2Library.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.HasKey("MemberId");

                    b.ToTable("Member", (string)null);

                    b.HasData(
                        new
                        {
                            MemberId = 1,
                            City = "Richmond",
                            Country = "Canada",
                            Created = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2650),
                            CreatedBy = "System",
                            Email = "sam@fox.com",
                            FirstName = "Sam",
                            LastName = "Fox",
                            Mobile = "778-111-2222",
                            Modified = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2700),
                            ModifiedBy = "System",
                            PostalCode = "V4F 1M7",
                            Street = "457 Fox Avenue"
                        },
                        new
                        {
                            MemberId = 2,
                            City = "Delta",
                            Country = "Canada",
                            Created = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2710),
                            CreatedBy = "System",
                            Email = "ann@day.com",
                            FirstName = "Ann",
                            LastName = "Day",
                            Mobile = "604-333-6666",
                            Modified = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2720),
                            ModifiedBy = "System",
                            PostalCode = "V6G 1M6",
                            Street = "231 Reiver Road"
                        },
                        new
                        {
                            MemberId = 3,
                            City = "Delta",
                            Country = "Canada",
                            Created = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2730),
                            CreatedBy = "System",
                            Email = "lucas@jian.com",
                            FirstName = "Lucas",
                            LastName = "Jian",
                            Mobile = "604-333-6666",
                            Modified = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2730),
                            ModifiedBy = "System",
                            PostalCode = "V6G 1M6",
                            Street = "231 Reiver Road"
                        });
                });

            modelBuilder.Entity("assignment2Library.Models.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeetingAddress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TripId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("TripId", "VehicleId")
                        .IsUnique();

                    b.ToTable("Trip", (string)null);

                    b.HasData(
                        new
                        {
                            TripId = 1,
                            Date = new DateOnly(2024, 2, 2),
                            Destination = "123 Marine Drive, Burnaby",
                            MeetingAddress = "1123 River Road, Coquitlam",
                            Time = new TimeOnly(12, 0, 0),
                            VehicleId = 1
                        },
                        new
                        {
                            TripId = 2,
                            Date = new DateOnly(2024, 2, 3),
                            Destination = "231 Boundary Road, Vancouver",
                            MeetingAddress = "345 King George Highway, Surrey",
                            Time = new TimeOnly(8, 0, 0),
                            VehicleId = 2
                        },
                        new
                        {
                            TripId = 3,
                            Date = new DateOnly(2024, 2, 4),
                            Destination = "12345 Lougheed Highway, Coquitlam",
                            MeetingAddress = "540 Oliver Road, Richmond",
                            Time = new TimeOnly(15, 0, 0),
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("assignment2Library.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfSeats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("VehicleId");

                    b.HasIndex("MemberId");

                    b.ToTable("Vehicle", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            Created = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2770),
                            CreatedBy = "System",
                            Make = "Ford",
                            MemberId = 1,
                            Model = "Escort",
                            Modified = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2770),
                            ModifiedBy = "System",
                            NumberOfSeats = 5,
                            VehicleType = "Sedan",
                            Year = 2020
                        },
                        new
                        {
                            VehicleId = 2,
                            Created = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2780),
                            CreatedBy = "System",
                            Make = "Kia",
                            MemberId = 2,
                            Model = "Soul",
                            Modified = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2780),
                            ModifiedBy = "System",
                            NumberOfSeats = 5,
                            VehicleType = "Compact",
                            Year = 2022
                        },
                        new
                        {
                            VehicleId = 3,
                            Created = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2790),
                            CreatedBy = "System",
                            Make = "Honda",
                            MemberId = 3,
                            Model = "Odyssey",
                            Modified = new DateTime(2024, 3, 14, 21, 54, 25, 36, DateTimeKind.Local).AddTicks(2790),
                            ModifiedBy = "System",
                            NumberOfSeats = 8,
                            VehicleType = "Minivan",
                            Year = 2019
                        });
                });

            modelBuilder.Entity("assignment2Libra.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "01c09cf9-8dc0-4aef-9d6c-2e18a4db1646",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Description = "Administrator Role"
                        },
                        new
                        {
                            Id = "00374381-1377-4967-b54f-ac003400c18b",
                            Name = "Owner",
                            NormalizedName = "OWNER",
                            Description = "Owner Role"
                        },
                        new
                        {
                            Id = "995fc891-743c-48f1-b603-d02109d9ddc2",
                            Name = "Passenger",
                            NormalizedName = "PASSENGER",
                            Description = "Passenger Role"
                        });
                });

            modelBuilder.Entity("assignment2Library.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "1420c19b-eee5-4df0-8a34-94ead1852708",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09b1914c-9509-40e0-94f6-831e9a59c0f9",
                            Email = "a@a.a",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "A@A.A",
                            PasswordHash = "AQAAAAIAAYagAAAAEJRGh2DST8G/ytL13ZZPkG4BpgzyMVVgb4tmMRhcNyPfYzL5EjutkyzMLKJblZTfpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7959ba5-390a-4292-abdc-a49e54a6225d",
                            TwoFactorEnabled = false,
                            UserName = "a@a.a",
                            FirstName = "Admin",
                            LastName = "Admin"
                        },
                        new
                        {
                            Id = "cbeafd4d-6cfb-4518-960d-3c0319339b73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d18858ff-a134-44b4-89bc-786a19702810",
                            Email = "o@o.o",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "O@O.O",
                            PasswordHash = "AQAAAAIAAYagAAAAEP33tdIwq7CuHGT/k/RGlWr/yh7f4dUumgxjJLcvQqgs6xkSD0pHr3QpBGhe+lHqTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1e24c85-61d1-4ba6-ac62-824a11d60ed7",
                            TwoFactorEnabled = false,
                            UserName = "o@o.o",
                            FirstName = "Owner",
                            LastName = "Owner"
                        },
                        new
                        {
                            Id = "b6db3e34-3ed9-4e48-a777-6c88f2df0534",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4079bb65-56e1-482a-8595-23311a279370",
                            Email = "p@p.p",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "P@P.P",
                            PasswordHash = "AQAAAAIAAYagAAAAEORpVJIEXba/xtQfdlT6fNUu8btwsyvQ/suwsbSj7Py0A9RZGlb5QY22SbyJcTihuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8e030d4-4efd-42e6-a0aa-856c266e2355",
                            TwoFactorEnabled = false,
                            UserName = "p@p.p",
                            FirstName = "Passenger",
                            LastName = "Passenger"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("assignment2Library.Models.Manifest", b =>
                {
                    b.HasOne("assignment2Library.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("assignment2Library.Models.Trip", b =>
                {
                    b.HasOne("assignment2Library.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("assignment2Library.Models.Vehicle", b =>
                {
                    b.HasOne("assignment2Library.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.Navigation("Member");
                });
#pragma warning restore 612, 618
        }
    }
}
